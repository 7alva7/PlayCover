name: Build & Release macOS App
on:
  push:
    tags:
      - "*"

env:
  CI: true

jobs:
  build:
    runs-on: macos-12
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the version
        id: tag_version
        run: echo ::set-output name=TAG_NAME::${GITHUB_REF/refs\/tags\//}

      - name: Install dependencies
        shell: bash
        run: |
          brew install graphicsmagick imagemagick
          gem install fastlane
          bundle install
          pip install setuptools
          npm install --global create-dmg

      - name: Fastlane Release
        shell: bash
        run: fastlane release
        env:
          MATCH_GIT_BASIC_AUTHORIZATION: ${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: 120 # x86 is slooooooow

      - name: Exract API_KEY
        shell: bash
        run: 'echo "$API_KEY" > apikey.json'
        env:
          API_KEY: ${{secrets.APPLE_API_KEY_JSON}}

      - name: Create DMG
        shell: bash
        run: |
          create-dmg ./output/PlayCover.app ./output
          mv ./output/*.dmg ./output/PlayCover.dmg

      - name: Notarize DMG
        shell: bash
        run: |
          fastlane notarize_dmg package:output/PlayCover.dmg

      - name: Clean Up
        shell: bash
        run: rm apikey.json

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: PlayCover.dmg
          path: output/PlayCover.dmg

      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: |
            output/PlayCover.dmg

  # manual release
  # bump-sparkle:
  #   needs: build
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         ref: update # let me know if i should push to another branch

  #     - name: Download Artifact
  #       uses: actions/download-artifact@v3.0.0
  #       with:
  #         path: ./updates/

  #     - name: Download Sparkle Toolset
  #       run: |
  #         mkdir sparkle
  #         curl -L "https://github.com/sparkle-project/Sparkle/releases/download/2.2.1/Sparkle-2.2.1.tar.xz" -o sparkle.tar.xz
  #         tar -xf sparkle.tar.xz -C sparkle

  #     - name: Update appcast.xml
  #       run: |
  #         echo ${{ secrets.SPARKLE_KEY }} | ./sparkle/bin/generate_appcast --channel stable \
  #         --download-url-prefix 'https://github.com/PlayCover/PlayCover/releases/download/${{ env.TAG_NAME }}/' \
  #         --link 'https://github.com/PlayCover/PlayCover/releases/tag/${{ env.TAG_NAME }}' \
  #         --full-release-notes-url 'https://github.com/PlayCover/PlayCover/releases/tag/${{ env.TAG_NAME }}' \
  #         -o appcast.xml \
  #         ./updates --ed-key-file -
  #       env:
  #         TAG_NAME: ${{ needs.build.outputs.TAG_NAME }}

  #     - name: Cleanup tmp files
  #       run: |
  #         rm -rf sparkle/
  #         rm sparkle.tar.xz

  #     - name: Commit changes
  #       run: |
  #         git add appcast.xml
  #         git config --local user.email "$GITHUB_EMAIL"
  #         git config --local user.name "$GITHUB_USERNAME"
  #         git commit -m "chore: add release ${{ env.TAG_NAME }}" -a
  #         git push
  #       env:
  #         GITHUB_USERNAME: github-actions[bot]
  #         GITHUB_EMAIL: actions@github.com
  #         TAG_NAME: ${{ needs.build.outputs.TAG_NAME }}
